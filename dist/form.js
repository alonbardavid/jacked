Object.defineProperty(exports,"__esModule",{value:true});var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();exports.configureBuilder=configureBuilder;var _traverse=require('traverse');var _traverse2=_interopRequireDefault(_traverse);var _lodash=require('lodash');var _fp=require('lodash/fp');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Form=function(){function Form(value,arg2){_classCallCheck(this,Form);_initialiseProps.call(this);this.value=value;if(arg2 instanceof Form){this._initFromPreviousForm(arg2);}else{this._initFromOptions(arg2);}}_createClass(Form,[{key:'_initFromPreviousForm',value:function _initFromPreviousForm(previousForm){this.validator=previousForm.validator;this.fields=previousForm.fields;this.onInput=previousForm.onInput;this.errors=previousForm.errors;}},{key:'_initFromOptions',value:function _initFromOptions(options){this.validator=options.validator(options.schema);this.onInput=options.onInput;this.errors=[];this._buildFields();this._validateAll();}},{key:'_onInput',value:function _onInput(path,value){this.onInput({path:path,value:value});}},{key:'update',value:function update(change){var validate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var newRootValue=(0,_fp.set)(change.path,change.value,this.value);var form=new Form(newRootValue,this);if(validate){form._validateAfterFieldChange(change.path);}else{form._setFieldDirty(change.path);}return form;}},{key:'_buildFields',value:function _buildFields(){var _buildField=this._buildField,value=this.value;this.fields=(0,_traverse2.default)(this.validator.getStructure()).map(function(){if(this.isLeaf){this.update(_buildField({path:this.path.join("."),value:(0,_lodash.get)(value,this.path),error:null,dirty:false}),true);}});}},{key:'_updateFieldsFromErrors',value:function _updateFieldsFromErrors(errors){var _this=this;errors.forEach(function(change){var value=(0,_lodash.get)(_this.value,change.path);var field=_this._buildField({path:change.path,value:value,error:change.message,dirty:change.dirty});_this.fields=(0,_fp.set)(change.path,field,_this.fields);});this.isValid=!(this.errors&&this.errors.length>0);}},{key:'_rebuildFields',value:function _rebuildFields(){var _buildField=this._buildField,value=this.value;this.fields=(0,_traverse2.default)(this.fields).map(function(){if(this.node.onInput){this.update(_buildField({path:this.path.join("."),value:(0,_lodash.get)(value,this.path),error:this.node.error,dirty:this.node.dirty}),true);}});}},{key:'_setFieldDirty',value:function _setFieldDirty(path){var oldField=(0,_lodash.get)(this.fields,path);var field=this._buildField({path:path,error:oldField.error,dirty:true,value:(0,_lodash.get)(this.value,path)});this.fields=(0,_fp.set)(path,field,this.fields);}},{key:'_validateAll',value:function _validateAll(){this.errors=this.validator(this.value);this._updateFieldsFromErrors(this.errors);}},{key:'validate',value:function validate(){var form=new Form(this.value,this);form._validateAfterFieldChange();return form;}},{key:'setSubmitted',value:function setSubmitted(){var submitted=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var form=new Form(this.value,this);form._submitted=submitted;if(this._submitted!=submitted){form._rebuildFields();}form.isValid=this.isValid;return form;}},{key:'_validateAfterFieldChange',value:function _validateAfterFieldChange(dirtyPath){var oldErrors=this.errors;this.errors=this.validator(this.value);var changes=this.getChanges(oldErrors,this.errors,dirtyPath);this._updateFieldsFromErrors(changes);}}]);return Form;}();var _initialiseProps=function _initialiseProps(){var _this2=this;this._submitted=false;this._buildField=function(_ref){var path=_ref.path,value=_ref.value,error=_ref.error,dirty=_ref.dirty;var oldField=(0,_lodash.get)(_this2.fields,path);return{value:value,onInput:_this2._onInput.bind(_this2,path),error:error,submitted:_this2._submitted,dirty:dirty!=null?dirty:oldField&&oldField.dirty};};this.getChanges=function(old,current,dirtyPath){var hash=old.reduce(function(hash,value){hash.set(value.path,{path:value.path,message:value.message,old:true});return hash;},new Map());current.forEach(function(value){var old=hash.get(value.path);if(old&&old.message==value.message){hash.delete(value.path);}else{hash.set(value.path,{path:value.path,message:value.message});}});if(dirtyPath){var oldError=((0,_lodash.get)(_this2.fields,dirtyPath)||{}).error;var dirtyValue=hash.get(dirtyPath)||{path:dirtyPath,message:oldError};hash.set(dirtyPath,_extends({},dirtyValue,{dirty:true}));}return Array.from(hash.values()).map(function(x){return x.old?{path:x.path,error:null}:x;});};};function configureBuilder(options){return function buildValidator(schema){return function validate(value,onInput){return new Form(value,_extends({},options,{schema:schema,onInput:onInput}));};};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,